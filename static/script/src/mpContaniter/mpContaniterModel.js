// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define([], function() {
    var mpContaniterModel;
    return mpContaniterModel = (function() {
      function mpContaniterModel() {
        this.register = bind(this.register, this);
        this.login = bind(this.login, this);
        this.getDocumentList = bind(this.getDocumentList, this);
        this.getDocumentList = bind(this.getDocumentList, this);
        this.getDoctorUrlList = bind(this.getDoctorUrlList, this);
      }

      mpContaniterModel.prototype.getDoctorUrlList = function() {
        return [
          {
            id: 1,
            url: 'doctor/doctor1.png'
          }, {
            id: 2,
            url: 'doctor/doctor2.png'
          }, {
            id: 3,
            url: 'doctor/doctor3.png'
          }
        ];
      };

      mpContaniterModel.prototype.getDocumentList = function(classification, callback) {
        return $.post(BASEPATH + "Document/getDocumentList", {
          classification: classification
        }, function(responseMsg) {
          if (responseMsg.errorCode) {
            alert(responseMsg.errorDesc);
            return;
          }
          return callback && callback();
        }, "json");
      };

      mpContaniterModel.prototype.getDocumentList = function(classification, callback) {
        return $.post(BASEPATH + "Document/getDocumentList", {
          classification: classification
        }, function(responseMsg) {
          if (responseMsg.errorCode) {
            alert(responseMsg.errorDesc);
            return;
          }
          return callback && callback(responseMsg);
        }, "json");
      };

      mpContaniterModel.prototype.login = function(loginPanel, loginObj, successHandler) {
        var i, j, loginData, loginDataList, ref;
        loginDataList = loginPanel.find('.loginForm').serializeArray();
        for (i = j = 0, ref = loginDataList.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          loginData = loginDataList[i];
          loginObj[loginData.name] = loginData.value;
        }
        return $.post(BASEPATH + "Login/loginSystem", {
          user: {
            userId: loginObj.userId,
            pwd: loginObj.pwd
          }
        }, function(responseMsg) {
          var responseUserInfo;
          if (responseMsg.errorCode) {
            alert(responseMsg.errorDesc);
            return;
          }
          responseUserInfo = responseMsg.userInfo || {};
          $.cookie.setCookie("userid", responseUserInfo.userId);
          return loginPanel.dialog('close');
        }, "json");
      };

      mpContaniterModel.prototype.register = function(registerPanel, registerObj) {
        var i, j, loginData, loginDataList, ref;
        loginDataList = registerPanel.find('.registerForm').serializeArray();
        for (i = j = 0, ref = loginDataList.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          loginData = loginDataList[i];
          registerObj[loginData.name] = loginData.value;
        }
        if (registerObj.pwd !== registerObj.resetPwd) {
          alert('密码不一致');
          registerObj = {};
          return;
        }
        return $.post(BASEPATH + "Register/registerUser", {
          user: {
            userId: registerObj.userId,
            pwd: registerObj.pwd,
            captcha: registerObj.captcha
          }
        }, function(responseMsg) {
          if (responseMsg.errorCode) {
            alert(responseMsg.errorDesc);
            return;
          }
          return registerPanel.dialog('close');
        }, "json");
      };

      return mpContaniterModel;

    })();
  });

}).call(this);
